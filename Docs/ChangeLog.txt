2021.June
- http://www.osdever.net/bkerndev/Docs/gdt.htm
- GDT
- Assembly Lib ideas:
https://github.com/tianocore/edk2/tree/master/MdePkg/Library/BaseLib/X64
https://github.com/rust-osdev/x86_64/blob/master/src/asm/asm.s
https://www.felixcloutier.com/x86/sgdt
https://newbedev.com/what-does-the-0x80-port-address-connect-to

x64 Arch overview, best so far:
https://www.codeproject.com/Articles/1273844/The-Intel-Assembly-Manual-3

2021.Maj
- BootInfo address is passed from UEFIEXL just fine, using MSABI calling convention on EXIS Main function

2021.Mar
- Working on the MemoryMap, getting the informations from UEFI for later development, we need
MemoryMap, FrameBuffer informations, ACPI tables to get start with more advanced kernel development
- Having trouble with MSVC compiled (MSABI) UEFI bootloader calling convention to LLVM ELF target (SYSV ABI) target,
as I dont want to make own linker or any custum calling convention / executable format yet (bcs we lose time for nonsense)
also I dont need to reinvent the wheel so, must use what we have and adapt to it, I want to use LLVM as the main
compiler for the whole project by standard in the future, I think its the best compiler right now for my goals
- I have to figure out how to use C calling convention for my kernel in ELF format just for fun or call the SYSV function with attribute
from the UEFIEXL and use sysv, but I dont want to use sysv bcs its not that what I want by my other kernel principles

2021.Feb
EXIS (Main Kernel Module)
- Fixed framebuffer funcionality, color conversion to UINT32
- Started memory allocators for generalization

2020.Jul
UEFIEXL (UEFI Exis Loader)
- File loader module, ELF
- Fixed MemoryMap request and ExitBootServices
- GOP initialization module, framebuffer address is hardcoded in the kernel until it gets more advanced

2020.Maj
- Base OS ideas and principles have been decided
- x86-64 Paging implementation / initialization for Exis kernel module (discontiuned)
- Hardware Specific Interface, (discontiuned until the base funcionality is done)

2021.Christmas
- Refactor the build, save the old kernel if later something goes wrong
- New working scenario: Win env., LLVM13 with run / build scripts, VSCode, for bootloader: VSCommunity2019? relative paths from all
the Repo's root for all scripts (for later automation)

2022.Jan

















